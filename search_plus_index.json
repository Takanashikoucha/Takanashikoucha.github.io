{"./":{"url":"./","title":"红茶馆","keywords":"","body":"红茶馆 兴趣范围： 日语 代码 音乐 摄影 骑行 联系方式： E-mail：katanashikoucha@outlook.com 自我介绍： 一个业余写写代码的日语专业毕业生 个人其他网站 NPS穿透 网盘 恋爱计时 GitHub加速 主要项目 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-05-19 16:58:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/当你的linux使用的是中文.html":{"url":"2_杂文/当你的linux使用的是中文.html","title":"当你的linux使用的是中文","keywords":"","body":" 嘛,这不算是我第一次见到这种字体效果了,但是我还是被吓到了.从第一次安装linux的时候我就在怀疑这种效果是故意的还是因为实在是没啥中文使用者在开发[大概很明显是后者]. 正常的处理方法 实际上并不算是处理,都是存在配置工具的.稍微调整就可以达到挺不错的效果了.搜索tweaktool就可以. 吐槽 神他喵的为什么不学学ubuntu那边直接用文泉驿当默认字体啊! 不用正常的中文字体就算了,神他喵的终端里还不是等宽字体! 用正常的字体和等宽也就算了,某发行版中文环境默认配置还是宋体,EXM???喵喵喵!?宋体?[某mint] 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:17 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/第一次参加骑行比赛的经历.html":{"url":"2_杂文/第一次参加骑行比赛的经历.html","title":"第一次参加骑行比赛的经历","keywords":"","body":"6-18号当天,我参加了第一次的骑行比赛[骑闯天路桃花岛资格赛]. 前一个月的时候我和表弟决定参加这个比赛.我们考虑了一下比赛能否完成.最后得出的结论是:完成应该还是可以的. 到了16号当天,我坐了一班晚点一小时的动车到了宁波.而这才是我这几天懵逼的开始. 实际上我那天晚上没有睡着...因为休学在家,作息一直是晚上工作,所以17号早上七点半我就把表弟叫醒,吃了个饭去找自行车店了.第二个懵逼的事情发生了,那就是没看车店营业时间,到了车店发现大门紧闭,而我们只剩下20分钟时间回程赶车.回程后,我们收拾行装退房去了汽车站. 最懵逼的事情发生了.汽车站的内部结构异常感人,我们绕了一圈才到售票处,在售票处问了咨询台托运在哪里,咨询台说在售票处后面,那么问题来了...这个后面是个什么情况我觉得有必要画个简单的示意图: 更重点的是这个人行通道是不让自行车通过的= -,这就很懵逼了.为什么我可以从正门进车站,进了车站也从这个地方出来了,却不能让我再从这个地方进去?What The Fuck?折腾了两圈以后我已经有些脱力,于是花钱让工作人员帮忙买票在托运处处理完了事情. 然后神奇的事情又发生在了下船登岛的时候,我的右手拇指被自行车给夹出血了. 在岛上,我们下午的时候爬了一段坡,于是发现我的车胎有些漏气. 比赛当天则是我最懵逼的时刻了. 刚骑出去2.7公里,我撞在了护栏上.那个时候我只感觉到突然控制不住车,转向失效,等我控制住以后我就来不及过弯了,我就挂在了护栏上. 最后我以龟速骑完了一圈直接回程了. 感觉自己和桃花岛命里相克.GGWP,等下个能完成的比赛吧. 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:17 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/第一个完整的python程序.html":{"url":"2_杂文/第一个完整的python程序.html","title":"第一个完整的python程序","keywords":"","body":"稳,从萌萌那里接了个GUI外包. 算是自己第一个完整的python程序. 下面是源代码,顺便也测试一下博客的代码显示效果: # coding=utf-8 \"\"\" Created on 2017-4-9 \"\"\" # import import os import tkinter from tkinter import ttk from tkinter import scrolledtext from tkinter.filedialog import askdirectory from queue import Queue import re import requests import xlwt from bs4 import BeautifulSoup from threading import Thread from xml.etree import ElementTree as ET import logging # set logging logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s', datefmt='%d %b %Y %H:%M:%S', filename='boxlog.log', filemode='a+') con = logging.StreamHandler() con.setLevel(logging.INFO) formater = logging.Formatter('%(levelname)-8s %(message)s') con.setFormatter(formater) logging.getLogger('').addHandler(con) # global set global SCHE global oknum global savep global KEYPOOL savep = os.getcwd() oknum = 0 SCHE = 0 HEADERS = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'} FAILEDURL = [] # spyder class DataWorker(Thread): def __init__(self, univ, queue): Thread.__init__(self) self.univ = univ self.queue = queue def run(self): while 1: URL = self.queue.get() self.univ.save_data(URL) self.queue.task_done() class AddWorker(Thread): def __init__(self, univ, queue): Thread.__init__(self) self.univ = univ self.queue = queue def run(self): while 1: IDX = self.queue.get() self.univ.get_address(IDX) self.queue.task_done() global SCHE global oknum SCHE = (oknum / (len(self.univ.stu_data) * 2) * 100) P1.config(value=SCHE) oknum = oknum + 1 class PCWorker(Thread): def __init__(self, univ, queue): Thread.__init__(self) self.univ = univ self.queue = queue def run(self): while 1: IDX = self.queue.get() self.univ.get_pc(IDX) self.queue.task_done() global SCHE global oknum SCHE = (oknum / (len(self.univ.stu_data) * 2) * 100) P1.config(value=SCHE) oknum = oknum + 1 class Spider(object): def __init__(self, url, stu_data=[], page=0.1, university=None): self.url = url self.stu_data = stu_data self.page = page self.university = university def initialization(self): REQ = requests.get(self.url, headers=HEADERS, verify=False) REQ.encoding = 'utf8' HTML = REQ.text SOUP = BeautifulSoup(HTML, 'lxml') STU_INF = SOUP.body.contents[3].table.find_all('tr')[1:] PATTERN = re.compile('(.+?)') for INF in STU_INF: self.stu_data.append(re.findall(PATTERN, str(INF))) # 获取总页数 P = SOUP.body.contents[3].div.div.form PATTERN = re.compile('共.+?>(\\d+?)\\r\\n\\t\\t(.+?)\\r\\n\\t\\t名单公示') self.university = re.findall(PATTERN, str(U))[0] # 生成所有页面的url池 def get_urlpool(self): URLPOOL = [] for i in range(2, self.page + 1): URLPOOL.append(self.url + '&start=%d' % ((i - 1) * 30)) return URLPOOL def get_data(self, urlpool): QUEUE = Queue() for url in urlpool: QUEUE.put(url) for _ in range(6): worker = DataWorker(self, QUEUE) worker.daemon = True worker.start() QUEUE.join() def save_data(self, url): try: REQ = requests.get(url, headers=HEADERS, verify=False, timeout=25) except: FAILEDURL.append(url) logging.warning(url + '\\nfailed to download.') T1.insert(tkinter.END, '\\n' + url + '\\nfailed to download.','red') T1.see(tkinter.END) return REQ.encoding = 'utf8' HTML = REQ.text SOUP = BeautifulSoup(HTML, 'lxml') STU_INF = SOUP.body.contents[3].table.find_all('tr')[1:] PATTERN = re.compile('(.+?)') for INF in STU_INF: self.stu_data.append(re.findall(PATTERN, str(INF))) logging.info('complete') T1.insert(tkinter.END, '\\n' + 'complete','green') T1.see(tkinter.END) def get_address(self, idx): school = self.stu_data[idx][2] try: while 1: global KEYPOOL KEY = KEYPOOL[-1] URL = ('http://restapi.amap.com/v3/place/text?&output=XML' + '&key=%s&keywords=%s' % (KEY, school)) REQ = requests.get(URL, timeout=25) HTML = REQ.text tree = ET.fromstring(HTML) INFO = tree.find('info').text logging.info(INFO) T1.insert(tkinter.END, '\\n' + 'INFO OK','green') T1.see(tkinter.END) if INFO == 'OK': break logging.warning('\\nkey: ' + KEY + ' runs up to daily limit') T1.insert(tkinter.END, '\\n' + '\\nkey: ' + KEY + ' runs up to daily limit','blue') T1.see(tkinter.END) try: KEYPOOL.remove(KEY) except: logging.info('\\nkey: ' + KEY + ' was removed') T1.insert(tkinter.END, '\\n' + '\\nkey: ' + KEY + ' was removed','blue') T1.see(tkinter.END) logging.info('\\nnow switching to key: ' + KEYPOOL[-1]) T1.insert(tkinter.END, '\\n' + '\\nnow switching to key: ' + KEYPOOL[-1],'blue') T1.see(tkinter.END) ADDS = tree.find('pois')[0].find('address').text CITY = tree.find('pois')[0].find('cityname').text AREA = tree.find('pois')[0].find('adname').text # print(ADDS, CITY, AREA) if ADDS == None: ADDS = 'Unknown' AREA = CITY + AREA except: AREA = 'Unknown' ADDS = 'Unknown' self.stu_data[idx] += [AREA, ADDS] # print(school+'\\n'+AREA+' '+ADDS) def add_address(self): QUEUE = Queue() for idx in range(len(self.stu_data)): QUEUE.put(idx) for _ in range(10): worker = AddWorker(self, QUEUE) worker.daemon = True worker.start() QUEUE.join() def get_pc(self, idx): stu = self.stu_data[idx] if stu[4] == 'Unknown': self.stu_data[idx].append('Unknown') return try: AD = str(stu[4].encode('gb2312')).replace('\\\\x', '%').lstrip('b\\'') URL = 'http://opendata.baidu.com/post/s?wd=%s&rn=20' % AD REQ = requests.get(URL, headers=HEADERS, timeout=25) REQ.encoding = 'gb2312' HTML = REQ.text SOUP = BeautifulSoup(HTML, 'lxml') PC = str(SOUP.body.section.table.find_all('tr')[1]) PATTERN = re.compile('td>(\\d+?)\", urlpath) b2.bind(\"\", selectPath) b3.bind(\"\", keypooladd) b4.bind(\"\", keypoolsub) keypool = [] path.set(savep) try: keypoolf = open('keypool.txt', 'r+') for line in keypoolf: keypool.append(line.replace('\\n', '')) KEYpool = list(set(keypool)) KEYPOOL = KEYpool for i in KEYpool: lis1.insert(tkinter.END, i) T1.insert(tkinter.END,'初始化成功','green') T1.see(tkinter.END) except: keypoolf = open('keypool.txt', 'w+') for line in keypoolf: keypool.append(line.replace('\\n', '')) KEYpool = list(set(keypool)) KEYPOOL = KEYpool for i in KEYpool: lis1.insert(tkinter.END, i) T1.insert(tkinter.END,'神他喵的根本没有key池','red') T1.see(tkinter.END) root.mainloop() 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:17 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/记几年内最后一次长途骑行.html":{"url":"2_杂文/记几年内最后一次长途骑行.html","title":"记几年内最后一次长途骑行","keywords":"","body":"就在7月的20号,我算是完成了这几年内最后一次远途的骑行. 坐标在青海,实际骑行天数并不多,也就两天而已. ▲这是去的时候坐动车时路过的兰州 之所以打算暂时终止这个爱好,大概是因为一种年龄带来的压迫感. 我20岁了,再也不是个孩子,需要开始为了未来攒钱了. ▲大概需要像这北斗一样的方向吧 我是从福州出发的,先到了西安呆了几天[不得不说西安是真的热] ▲西安的车站 ▲西安的鼓楼 ▲在钟楼上的延时 ▲远远看着钟楼 青海的景色大概就像是下面这样吧: 最后是做的飞机回的家 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-03-02 01:29:25 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/幸せになる.html":{"url":"2_杂文/幸せになる.html","title":"幸せになる","keywords":"","body":"2017将要结束,而我终于也变得幸福起来了 我向来是觉得自己是不幸的.因为总觉得上苍没有给我别人一样的机会.我不断的加宽着自己的知识面,就是为了能让人需要自己. 而我,终于等到那个人了.等到一个想要和她过一辈子的人. My Lovely Fox 在这之前,我基本是没什么动力去做事情的,而现在总算是不那么悲观了. 我们也会有争论,也会有分歧.但是我确定那些都会被解决. 新的一年的计划,我希望能和她一起书写,一起完成每一项. 变得越来越幸福. 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:17 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"2_杂文/一张旧显卡.html":{"url":"2_杂文/一张旧显卡.html","title":"一张旧显卡","keywords":"","body":"在整理杂物的时候,这样东西突然就引起了我的注意: 很显然,这是一张报废了的显卡. 这张显卡是我接触的第一台电脑上面拆下来的,那个时候我对电脑的认知水平还低的可怕. 于是又开始胡思乱想,想到点关于硬件升级的事.就顺手记下来好了. 首先直接下个个人结论:硬件是还需要升级的,而且很需要. 那么,是什么让我小纠结了呢? 是与硬件紧密相关的系统的进化变缓 现在的操作系统,无非就是巨硬或者*unix这种.先说说win吧,最开始的时候,我使用了小学的win98系统,那个时候真的是上课什么都不懂,就知道点开扫雷或者画图.后来用上了图中那块显卡的来源,那个时候用的是XP系统,sp2,记得很清楚,因为期间坏了一次,喊来了个老哥换了sp3,从那个时候开始我就各种安装卸载系统玩了.[跑题中]我想说的是:这么久的时间过去了,鼠标和键盘这种交互方式已经像是身体的一部分了,只要是在使用win系列,第一反应绝对是找到个鼠标,键盘甚至是其次的.于是我甚至觉得win8.1的设计是比win10来的更好的[默认情况,未调整开始菜单].因为本身靠鼠标和触控屏变多了以后,键盘的优势仅剩余打字的手感和速度了[手指粗点键盘要半天系列] 我对*unix的认知实际上也不是很够,基本上印象全来自debian系列,最近才开始碰arch[manjaro].而不管是manjaro也好,debian/ubuntu也好,最重要的软件大概就是终端了.很难想象一个不能打命令的linux系统是什么样子的.命令下的思考方式更适合我,传参,管道这种东西让我感受到了在没有花哨界面时候的程序员们的体验. 那么那个时候的人是怎么看待硬件的升级的呢?我没记错的话,巨硬老板说过:128mb内存妥妥的是够的哟[大概是类似的话吧].然而现在的内存差不多是8G起步了. 系统本身占用的资源一直是往某个期望值去设计的.大概是当前流行配置的25%左右吧. 那么,现在的系统还有更高的形态吗 存在,而且必然存在.现在的系统实际上是很死板的,直到智能手机的出现才有一定的改进. 所以,在不久的近未来必然出现第二次类似智能手机出现的热潮. 所以,为了与将来的形态对应,硬件必然也会随之进步. 胡思乱想的记录文...没啥结构和目的性可言... 最后再记录一条预言吧:语音技术和中距离通讯技术是我很期待的. 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:17 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/获取Q群成员的邮箱的方法.html":{"url":"3_分享/获取Q群成员的邮箱的方法.html","title":"获取Q群成员的邮箱的方法","keywords":"","body":"上周,和以前物理竞赛的小伙伴[现在在武大],合作了一波,帮忙给思课写了个小工具,分享一下一些心得. tkinter监听窗口关闭事件的方法: root.protocol(\"WM_DELETE_WINDOW\", quit) # 其中第二个参数是需要执行的函数 需要结束进程树的时候: os.system('taskkill /f /t /im *******') 调用结束进程树的命令就好了[写的工具存在一些谜一样的无法kill进程问题] 推荐使用subprocess模块替代os.system命令 无法打包情况下的最差方案: python32.exe /quiet PrependPath=1 @echo \"python install OK\" @echo \" \" @echo \" \" @echo \" \" @echo \"try to get depend\" python .\\depend.py ------------------------------------ 第一行静默后台安装python32位并且加入path 后面则是执行python的依赖安装,其实可以直接写python -m install *** 如何隐藏控制台窗口启动程序: @echo off if \"%1\" == \"h\" goto begin mshta vbscript:createobject(\"wscript.shell\").run(\"%~nx0 h\",0)(window.close)&&exit :begin 下面是你自己的代码。 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-03-02 01:25:35 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/爬青空文库全站.html":{"url":"3_分享/爬青空文库全站.html","title":"爬青空文库全站","keywords":"","body":" 先丢下载链接 2017-4-15爬取 搜索了一阵子有没有打包好的html文件,结果并没有,于是使用了 wget -c -r -np -k -L -p http://www.aozora.gr.jp 下载了青空文库全站 之后又使用: # coding =UTF-8 ''' from Koucha on 2017-4-15 ''' import sys import os import shutil import re def sourcecpy(src, des): src = os.path.normpath(src) des = os.path.normpath(des) if not os.path.exists(src) or not os.path.exists(src): print(\"文件路径不存在\") sys.exit(1) os.chdir(src) src_file = [os.path.join(src, file) for file in os.listdir()] for source in src_file: if os.path.isfile(source): shutil.copy(source, des) if os.path.isdir(source): p, src_name = os.path.split(source) des = os.path.join(des, src_name) shutil.copytree(source, des) os.chdir(r'F:\\Bak_Aozora\\Aozora') oldout = sys.stdout sys.stdout = open(r'C:\\Users\\koucha\\Desktop\\JP_Learner\\log.txt', 'w+') what = os.walk(r'F:\\Bak_Aozora\\Aozora') filespathlist = [] for i in what: if re.search('files$', i[0]) is not None: filespathlist.append(i[0]) print(filespathlist) for eachpath in filespathlist: sourcecpy(eachpath, r'F:\\files\\files') sys.stdout.close() sys.stdout = oldout print('ok') 提取了所有的files文件夹下的文件,再单独把html的文件复制了一份压缩上传.之后可能会分类吧....不过并不打算上传分类好的文件. 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-03-02 01:26:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/使用VScode的感想和一些细节修改.html":{"url":"3_分享/使用VScode的感想和一些细节修改.html","title":"使用VScode的感想和一些细节修改","keywords":"","body":"嘛,不知不觉用VScode也有一段时间了.已经把它打造成为了非常顺手的工具. 下面分几个方面来讲一下怎么调整VScode的设置来让自己更舒服吧. 主题 我用过了挺多的主题的,主题一般都是高亮不同,个人喜好暗色调保护眼睛,于是最后选择了一款叫做: Nord 的主题. 暗色调和舒服的界面观感,代码高亮也挺舒服的.感觉稍微优于排名最高的 one dark pro 图标的话,还是偶尔在更换,目前在使用 VSCode Great Icons . 插件 个人使用了以下插件: C/C++ [c语言支持] Charcter Count [markdown字数计数] Code Runner [运行代码] Git History [git的log显示,主要是有个时间流] Guides [显示缩进参考线] Java Debugger & Language support for Java [Java支持] MagicPython [对python的支持加强] Preview [html和markdown的预览] Python [python的支持] vscode-fileheader [用快捷键来添加一些文件信息到文件头] 设置 对于编辑器,主要就是通过调整字体和行高字间距之类的来让眼睛更舒服. 对于工作区,最主要的就是把菜单栏改成了alt可见的模式,平时不需要用到.白色一条颇影响整体观感.还有就是插件自动更新和调试结束后自动跳回资源管理器. 对于内置终端,修改为了powershell,通过传参启动默认了编码为utf-8,修改了光标样式和闪烁,关闭了响铃. python默认的linting有点烦人,所以修改成了pep8,格式化使用了yapf,关于这方面后面详细讲. java需要设置javahome的位置,默认的好像有异常,不是很经常用java所以不多说. 还有就是html的自动换行,markdown的字体修改[默认的字体丑炸,原本打算换css来改的,后来发现改个字体就好多了].code runner编码存在问题所以我设置了在终端中运行. 关于打造Python的IDE 首先,需要安装python插件.然后安装上magicpython[增强用] 然后个人是习惯将launch.json文件的 \"stopOnEntry\": true 改为 \"stopOnEntry\": false .这样子可以不用按两下才开始运行. 默认的linting非常烦人...异常的严格,所以我换成了pep8的lint .格式化的话使用了yapf vscoded的加断点来调试还是挺方便的.内置的终端也可以运行ipython来随时进行一些测试. 最后 实际上,本博客也是一直在使用VScode来写的,体验真的非常棒.markdown实时预览很舒服.终端随时可以运行命令同步仓库. 使用VScode这段时间的感觉用几个字形容的话那就是:快,轻,方便 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/又是一顿折腾路由器-附带对于以后可能会使用的智能设备的想法.html":{"url":"3_分享/又是一顿折腾路由器-附带对于以后可能会使用的智能设备的想法.html","title":"又是一顿折腾路由器-附带对于以后可能会使用的智能设备的想法","keywords":"","body":"趁着年轻多折腾一下这些东西,老了以后大概就折腾不动了.[其实现在就已经有点老年心态了 🙄] 这两天在学校有那么一点点没事做,所以说把原来的刷成lede的小米路由器又进行了折腾. 先是刷成了自己编译的openwrt[顺便学习了一下如何编译openwrt].然后存在很多细细碎碎的bug,有点讨厌.所以又刷成了Pandava.然后发现Pandava比较适合懒人,因为东西基本都配置好了,只需要修改一下配置就好了. 附上一张截图: 想要的智能配件生活 对于未来的生活,我做了一些设想.主要是关于家居的智能设备的架构和具体需要的技术层面的问题. 网关设备:一切智能设备的核心 首先需要有千兆的吞吐量 然后需要具有透明代理的功能来达到全局控制FQ 门附近的设备 首先门需要具有识别人脸的功能,对访客进行识别,同时增加安全性 其次需要有一个智能的门铃设备 智能的电源 远程控制灯光/冰箱/空调/电视 热水器 房间音响 零碎的小东西 盆栽 宠物相关 其他[后续补充] 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/运行一个自己的QQbot.html":{"url":"3_分享/运行一个自己的QQbot.html","title":"运行一个自己的QQbot","keywords":"","body":" 画风大概就是这样吧,运行了一个qqbot,项目来自github. 去看项目 接入了图灵机器人的api: 虽然有点傻....不过还是挺好玩的[滑稽] 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/在服务器上部署Jypyter并且为其套上https以便ios设备使用的方法.html":{"url":"3_分享/在服务器上部署Jypyter并且为其套上https以便ios设备使用的方法.html","title":"在服务器上部署Jypyter并且为其套上https以便ios设备使用的方法","keywords":"","body":"先给出一个示例结果: MyJupyter 萌萌开始给学弟学妹讲python了,而我还是个辣鸡,所以只能给萌萌填一点坑.就比如ios设备强制https访问导致的无法正常使用jypyter的问题. 在服务器上部署jupyter 推荐由annaconda安装. 先安装annaconda,之后 conda install jupyter 生成Jupyter的配置文件 在启动Jupyter的时候需要配置文件启动，所以首先要生成配置文件。使用命令 jupyter notebook --generate-config 自动生成配置文件，配置文件的目录应该是~/.jupyter。 生成密码 # 在python中运行 from notebook.auth import passwd passwd() 生成ssl证书 openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mykey.key -out mycert.pem 修改jupyter的配置文件 # 密码 c.NotebookApp.password = u'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed' # ssl证书绝对位置 c.NotebookApp.certfile = u'/absolute/path/to/your/certificate/mycert.pem' c.NotebookApp.keyfile = u'/absolute/path/to/your/certificate/mykey.key' # 其他设置 c.NotebookApp.ip = '*' c.NotebookApp.allow_origin = '*' c.NotebookApp.open_browser = False c.NotebookApp.port = 9999 运行 这个时候用jupyter命令应该就能运行了,并且通过https://ip:端口 的形式应该就能访问. 通过 nohup 命令应该就能够后台持久化运行. 但是现在依然是不安全的ssl证书所以无法使用ios设备访问. 添加https的步骤 其实很简单 为服务器绑定域名 给服务器加上nginx反向代理(443端口,带上刚才生成的ssl证书) 使用cloud flare管理dns(添加cdn,https,防ddos等功能) 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-03-02 01:27:32 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/折腾了一下小米路由器mini.html":{"url":"3_分享/折腾了一下小米路由器mini.html","title":"折腾了一下小米路由器mini","keywords":"","body":"怎么办,我好像得了不折腾就要死的病. 之所以突然想折腾这个东西的原因是因为最近开始使用某些被Q了的东西,比如telegram.而我刚好使用了苹果...而且还是没有越狱的... 这就要求我有个能够全局FQ的路由器.问了问tg群组里的大佬,于是选择了小米路由器mini.[带去学校用的.] 进入正题 要想要达到效果,存在以下步骤,其中遇到提示的点会给引用当作tips. 打开小米路由器mini的SSH 我在这一步上花费了挺大的力气的.因为我一直无法使用别人给的python或者web-url-api的方法打开权限. 恩山论坛上面是会有相关教程的,实际上以此为关键词搜索很容易得到大量结果,所以不赘述. 到了最后我刷回了远古版本的开发版固件,然后使用了官方SSH工具包才刷进SSH.但这似乎也导致了一些迷之问题,似乎是因为分区方式不一样之类的导致的.[但是至少是能用的了] 刷进Breed 上传Breed到/tmp目录使用mtd刷就可以了.如果SSH 成功了那后面就比较简单了. 虽然可以跳过但是挺重要的,万一刷死了用这个比较方便刷别的固件或者退回官方. 刷进lede固件[openwrt也行,老毛子固件也行] 如果嫌麻烦可以刷老毛子的,集成的服务比较多. [http://rt.cn2k.net/] 如果定制化要求比较高那就lede 参考[http://www.right.com.cn/forum/thread-147929-1-1.html] lede的配置 推荐Shadow+ChinaDns方案,可以加Dns转发来代替端口转发. 参考:[https://blog.chionlab.moe/2016/01/23/openwrt-bypass-gfw-solution/] 主要是参考端口的配置方法:内置53端口-chinadns5353分流-国内走114,国外走dns转发的ss. 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/kali-tools工具文档.html":{"url":"3_分享/kali-tools工具文档.html","title":"kali-tools工具文档","keywords":"","body":"kali_linux是个用于安全渗透测试的系统,包含了大量工具,这里分享一个帮助文档,有中英文[虽然中文基本是机翻]. 压缩包下载地址 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"3_分享/MacType配置文件.html":{"url":"3_分享/MacType配置文件.html","title":"MacType配置文件","keywords":"","body":"----------------------------2017-5-6更新 点此下载 ----------------------------原版 MacType是用来提升win下的字体显示效果的软件,现在已经支持win10了,在这里分享一下我的配置文件,使用了文泉驿微米黑作为底板. 预览: 点此下载 全部文章采用 CC BY-NC-ND 4.0 许可协议 all right reserved，powered by Gitbook该文件修订时间： 2020-02-21 23:44:05 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}